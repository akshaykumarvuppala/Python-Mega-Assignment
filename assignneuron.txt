Q1.Why do we call Python as a general purpose and high-level programming language?

Python is considered a general-purpose and high-level programming language because it is designed to be used for a wide variety of tasks, including web development, data analysis, scientific computing, artificial intelligence, machine learning, and more. Python's versatility is due to its simplicity, readability, and easy-to-learn syntax.

Q2.Why is Python called a dynamically typed language?

Python is called a dynamically typed language because the data type of a variable is determined at runtime, rather than at compile-time. In other words, the data type of a variable can be changed during the execution of a program.

Q3.List some pros and cons of Python programming language?

Python is a popular programming language that has many advantages, but also has some drawbacks. Here are some pros and cons of using Python:

Pros:
Easy to learn and read
Versatile and flexible
Cross-platform support
Rapid development

Cons:
Slow performance
Memory management
Global Interpreter Lock (GIL)
Not well-suited for mobile development
Lack of backward compatibility

Q4.In what all domains can we use Python?
Web Development
Data Science and Analytics
Scientific Computing
Artificial Intelligence and Machine Learning

Q5. What are variable and how can we declare them?

A variable is a named memory location that stores a value. In Python, we can declare a variable by assigning a value to it using the '=' assignment operator.

Q6. How can we take an input from the user in Python?

We can take input from the user in Python using the input() function.

Q7. What is the default datatype of the value that has been taken as an input using input() function?

The default datatype of the value taken as an input using the input() function is a string.

Q8. What is type casting?

Type casting, also known as type conversion, is the process of converting a value from one data type to another data type. In Python, we can use functions like int(), float(), and str() to perform type casting.

Q9. Can we take more than one input from the user using single input() function? If yes, how? If no, why?

No, we cannot take more than one input from the user using a single input() function. The input() function always returns a string value, and we need to use the appropriate type casting functions to convert the input value to the desired data type.

Q10. What are keywords?

Keywords, also known as reserved words, are words that have a special meaning in the Python language and cannot be used as variable names or function names. Examples of keywords in Python include if, else, for, while, def, and import.

Q11. Can we use keywords as a variable? Support your answer with reason.

No, we cannot use keywords as a variable because keywords have a special meaning in the Python language, and using them as a variable name would result in a syntax error.

Q12. What is indentation? What's the use of indentation in Python?

Indentation refers to the use of whitespace (spaces or tabs) at the beginning of a line to indicate a block of code. In Python, indentation is used to delimit blocks of code, such as in loops, conditional statements, and function definitions. The use of indentation helps make the code more readable and reduces the likelihood of syntax errors.

Q13. How can we throw some output in Python?

We can output data in Python using the print() function. For example:

Q14. What are operators in Python?

Operators in Python are symbols or keywords that perform operations on values or variables. 

Q15. What is difference between / and // operators?

The / operator performs division and returns a float value, while the // operator performs integer division and returns an integer value (rounded down to the nearest whole number).

Q16. Write a code that gives following as an output.

w='iNeuron'
w*=4
print(w)

Q17.Write a code to take a number as an input from the user and check if the number is odd or even.

Here's the Python code to take a number as input from the user and check if it is odd or 
number = int(input("Enter a number: "))
if number % 2 == 0:
    print(number, "is even")
else:
    print(number, "is odd")
Q18. What are boolean operator?

Boolean operators are operators that operate on Boolean values (True and False). There are three boolean operators in Python (and,or,not)

Q19.  What will the output of the following?

Here are the outputs of the following:

1 or 0:  1
0 and 0:  0
True and False and True:  False
1 or 0 or 0: 1

Q20. What are conditional statements in Python?
conditional statements are used to perform different actions based on different conditions. These statements allow a program to make decisions and execute different blocks of code depending on whether a certain condition is true or false. The two main conditional statements in Python are if and 'else'.

Q21. What is use of 'if', 'elif' and 'else' keywords?
The if statement is used to check if a certain condition is true. If it is true, then the block of code following the if statement is executed. If the condition is false, then the block of code is skipped.

The elif (short for else if) statement is used to check for additional conditions after the if statement. If the condition in the if statement is false, the program will check the condition in the "elif" statement. If the "elif" condition is true, then the block of code following the "elif" statement will be executed.

The "else" statement is used to provide a default action to be taken if all of the conditions in the "if" and "elif" statements are false. The block of code following the "else" statement will be executed if none of the other conditions are true.


Q22. Write a code to take the age of person as an input and if age >= 18 display "I can vote". If age is < 18 display "I can't vote".

def age(age):
	if age>=18:
		return 'I can Vote'
	elif age<18:
		return 'I can't Vote'

Q23. Write a code that displays the sum of all the even numbers from the given list.

numbers = [12, 75, 150, 180, 145, 525, 50]

def numbers(list):
	sum=0
	for i in list:
		if i%2==0:
			sum=sum+i
		else:
			continue
	return sum
print(numbers(numbers))



Q24. Write a code to take 3 numbers as an input from the user and display the greatest no as output.

Here's a Python code that takes three numbers as input from the user and displays the greatest number as output:

# Taking input from the user
num1 = int(input("Enter first number: "))
num2 = int(input("Enter second number: "))
num3 = int(input("Enter third number: "))

# Finding the greatest number
if num1 > num2 and num1 > num3:
    greatest = num1
elif num2 > num1 and num2 > num3:
    greatest = num2
else:
    greatest = num3

# Displaying the greatest number
print("The greatest number is:", greatest)

Q25. Write a program to display only those numbers from a list that satisfy the following conditions

The number must be divisible by five

If the number is greater than 150, then skip it and move to the next number

If the number is greater than 500, then stop the loop

numbers = [12, 75, 150, 180, 145, 525, 50]

def greater(list1):
    list2=[]
    for i in numbers:
        if i%5==0:
            if i>150 and i<500:
                continue
                
            elif i>500:
                break
            else:
                list2.append(i)
        
    return list2



numbers = [12, 75, 150, 180, 145, 525, 50]
greater(numbers)


Q26. What is a string? How can we declare string in Python?
In Python, a string is a sequence of characters that is used to represent textual data. It is a data type that is used to store a collection of characters such as letters, numbers, and symbols. Strings are immutable in Python. 

To declare a string in Python simply enclose a sequence of characters in single quotes '' or double quotes ""

Q27. How can we access the string using its index?

In Python, we can access the string using its index. 
example:
my_string = "Hello World!"
first_char = my_string[0]
print(first_char)

Q28. Write a code to get the desired output of the following

string = "Big Data iNeuron"
desired_output = "iNeuron"

print(string[9:])

Q29. Write a code to get the desired output of the following

string = "Big Data iNeuron"
desired_output = "norueNi"

print(string[-1:-8:-1])

Q30. Resverse the string given in the above question.

print(string[::-1])

Q31. How can you delete entire string at once?
by using del keyword

del string

Q32. What is escape sequence?
an escape sequence is a combination of characters that represents a special character or sequence of characters that cannot be represented directly in a string. Escape sequences are represented by a backslash followed by one or more characters.
the escape sequence \n represents a new line character, and the escape sequence \t represents a tab character

Q33. How can you print the below string?

'iNeuron's Big Data Course'

print("iNeuron's Big Data Course")
  or
print("iNeuron\'s Big Data Course")

Q34. What is a list in Python?
In Python, a list is a collection of items that are ordered and mutable. It is a sequence data type that can contain elements of different data types, such as integers, strings, and even other lists. Lists are represented by square brackets [] and each element is separated by a comma.

Q35. How can you create a list in Python?
To create a list in Python, simply enclose a comma-separated sequence of elements in square brackets []

Q36. How can we access the elements in a list?
 We can access the elements in a list using the indexing operator [] and the index of the element we want to access. The index of the first element in a list is 0, the second element has an index of 1, and so on. We can also use negative indexing to access elements from the end of the list.

Q37. Write a code to access the word "iNeuron" from the given list.

lst = [1,2,3,"Hi",[45,54, "iNeuron"], "Big Data"]

lst = [1, 2, 3, "Hi", [45, 54, "iNeuron"], "Big Data"]
ineuron_word = lst[4][2]
print(ineuron_word)  

Q38.Take a list as an input from the user and find the length of the list.
 To take a list as input from the user and find its length, we can use the input() function to get a comma-separated sequence of elements as a string, and then use the split() function to split the string into a list of strings. We can then use the len() function to find the number of elements in the list:

lst = input("Enter a list of elements separated by space: ").split()
length = len(lst)
print("The length of the list is:", length)

Q40. What is a tuple? How is it different from list?

A tuple is another built-in data type in Python, just like lists. However, the main difference between a list and a tuple is that a list is mutable, meaning that its elements can be changed, added, or removed after creation, while a tuple is immutable, meaning its elements cannot be changed after creation. Once a tuple is created, it can't be modified.

Q41. How can you create a tuple in Python?

To create a tuple in Python, you can enclose a sequence of values in parentheses, separated by commas. For example:
my_tuple = (1, 2, 3, "Hello", "World")

Q42. Create a tuple and try to add your name in the tuple. Are you able to do it? Support your answer with reason.

No, we can't add an item to an existing tuple. Since tuples are immutable, we can't modify them after they are created. If we try to add an item to a tuple, we get a TypeError saying that 'tuple' object does not support item assignment.

Q43. Can two tuples be appended. If yes, write a code for it. If not, why?

No, two tuples can't be appended, as tuples are immutable and their elements cannot be modified after creation. However, we can concatenate two tuples to create a new tuple that contains all the elements of both the original tuples. Here's an example:

tuple1 = (1, 2, 3)
tuple2 = (4, 5, 6)
new_tuple = tuple1 + tuple2
print(new_tuple)
Output:
(1, 2, 3, 4, 5, 6)

Q44. Take a tuple as an input and print the count of elements in it.

Here's a code to take a tuple as input from the user and print the count of elements in it:

my_tuple = tuple(input("Enter a tuple of elements separated by space: ").split())
count = len(my_tuple)
print("The count of elements in the tuple is:", count)
In this code, the input function takes a string input from the user, which is then split into a tuple of elements using the split() function. The len() function is used to find the count of elements in the tuple, and the result is printed to the console using the print() function.

Q45. What are sets in Python?

A set is another built-in data type in Python, just like lists and tuples. A set is an unordered collection of unique elements. This means that each element in a set is unique, and no element can appear more than once in a set.

Q46. How can you create a set?

To create a set in Python, you can enclose a sequence of values in curly braces, separated by commas.

Q47. Create a set and add "iNeuron" in your set.

Here's a code to create a set and add "iNeuron" to it:

my_set = {}
my_set.add("iNeuron")
print(my_set)

Q48. Try to add multiple values using add() function.

The add() function can only add one element at a time to a set. However, if you want to add multiple elements to a set, you can use the update() function


Q49. How is update() different from add()?

The add() function is used to add one element to a set, whereas the update() function is used to add multiple elements to a set.

Q50. What is clear() in sets?

The clear() function is used to remove all the elements from a set. After applying the clear() function, the set becomes empty.


Q51. What is frozen set?

A frozen set is an immutable version of a set. Once a frozen set is created, its elements cannot be changed or updated. Frozen sets are useful when you want to use sets as keys in dictionaries or as elements of other sets.

Q52. How is frozen set different from set?

The main difference between a frozen set and a set is that a frozen set is immutable, whereas a set is mutable. This means that once a frozen set is created, you cannot add, remove, or update its elements.

Q53. What is union() in sets? Explain via code.

The union() function is used to combine two or more sets and return a new set with all the elements from the original sets.


Q54. What is intersection() in sets? Explain via code.

The intersection() function is used to return a new set with only the common elements from two or more sets.

Q55. What is dictionary in Python?

A dictionary is a collection of key-value pairs in Python. Each key-value pair in a dictionary is separated by a colon (:), and each pair is separated by a comma (,). Dictionaries are also known as associative arrays or hash tables in other programming languages.

Q56. How is dictionary different from all other data structures.

The main difference between dictionaries and other data structures in Python is that dictionaries are not ordered. In other words, the elements in a dictionary are not stored in any particular order, and you cannot access them using an index. Instead, you access the elements in a dictionary using their keys.

Q57. How can we declare a dictionary in Python?

Here's how you can declare a dictionary in Python:
my_dict = {"key1": "value1", "key2": "value2"}

Q58. What will the output of the following?

var = {}
print(type(var))


<class 'dict'>

Q59. How can we add an element in a dictionary?
To add an element in a dictionary, you can use the square bracket notation to specify a new key and assign its value. For example, to add a key-value pair to an existing dictionary:

my_dict = {'a': 1, 'b': 2}
my_dict['c'] = 3
print(my_dict)  

Q60.Create a dictionary and access all the values in that dictionary.
 Here's an example of creating a dictionary and accessing all its values:


my_dict = {'a': 1, 'b': 2, 'c': 3}
for value in my_dict.values():
    print(value)

Q61. Create a nested dictionary and access all the element in the inner dictionary.
Here's an example of creating a nested dictionary and accessing all its elements in the inner dictionary:

my_dict = {'a': {'x': 1, 'y': 2}, 'b': {'x': 3, 'y': 4}}
for key, inner_dict in my_dict.items():
    for inner_key, inner_value in inner_dict.items():
        print(key, inner_key, inner_value)

Q62.What is the use of get() function?
 The get() function is used to retrieve the value of a key in a dictionary, and returns a default value if the key does not exist in the dictionary. For example:

Q63.What is the use of items() function?
 The items() function is used to return a view object that contains the key-value pairs of a dictionary as tuples. For example:

my_dict = {'a': 1, 'b': 2}
items = my_dict.items()
print(items)   
dict_items([('a', 1), ('b', 2)])

Q64. What is the use of pop() function?
The pop() function is used to remove a key-value pair from a dictionary and return the value associated with the key. 

Q65.What is the use of popitems() function?

The popitems() function is used to remove and return an arbitrary key-value pair from a dictionary. 

Q66. What is the use of keys() function?
The keys() function is used to return a view object that contains the keys of a dictionary. 

Q67.What is the use of values() function?
 The values() function is used to return a view object that contains the values of a dictionary. 
my_dict = {'a': 1, 'b': 2}
values = my_dict.values()
print(values)   
dict_values([1, 2])

Q68.What are loops in Python?

Loops in Python are used to execute a block of code repeatedly. They allow you to iterate over collections of data, perform calculations, and execute other kinds of repetitive tasks.

Q69.How many type of loop are there in Python?

There are two types of loops in Python: for loops and while loops.

Q70.What is the difference between for and while loops?

The main difference between for and while loops is that a for loop is used for iterating over a sequence of items, while a while loop is used for repeatedly executing a block of code as long as a certain condition is true.

Q71.What is the use of continue statement?

The continue statement is used to skip the current iteration of a loop and move on to the next iteration. For example, in a for loop:

Q72.What is the use of break statement?

The break statement is used to exit a loop prematurely.

Q73.What is the use of pass statement?

The pass statement is used as a placeholder when you need to write a block of code that does nothing.

Q74.What is the use of range() function?

The range() function is used to generate a sequence of numbers. It can be used to specify the start, end, and step size of the sequence.

Q75. How can you loop over a dictionary? 

You can loop over a dictionary using a for loop. By default, a for loop will iterate over the keys of a dictionary. For example:
my_dict = {'a': 1, 'b': 2, 'c': 3}
for key in my_dict:
    print(key, my_dict[key])

Q76. Write a Python program to find the factorial of a given number.

def factorial(num):
    if num == 0:
        return 1
    else:
        return num * factorial(num - 1)

# Get input from user
num = int(input("Enter a number: "))

# Call the factorial function
result = factorial(num)

# Print the result
print("The factorial of", num, "is", result)

Q77. Write a Python program to calculate the simple interest. Formula to calculate simple interest is SI = (PRT)/100

# get inputs
principal = float(input("Enter the principal amount: "))
rate = float(input("Enter the rate of interest: "))
time = float(input("Enter the time period in years: "))

# calculate simple interest
simple_interest = (principal * rate * time) / 100

# display the result
print("Simple Interest = ", simple_interest)

Q78. Write a Python program to calculate the compound interest. Formula of compound interest is A = P(1+ R/100)^t.

# get inputs
principal = float(input("Enter the principal amount: "))
rate = float(input("Enter the rate of interest: "))
time = float(input("Enter the time period in years: "))

# calculate compound interest
amount = principal * (1 + (rate / 100)) ** time
compound_interest = amount - principal

# display the result
print("Compound Interest = ", compound_interest)

Q79. Write a Python program to check if a number is prime or not.

# get input
num = int(input("Enter a number: "))

# check if number is prime
is_prime = True

if num < 2:
    is_prime = False

for i in range(2, int(num/2)+1):
    if num % i == 0:
        is_prime = False
        break

# display the result
if is_prime:
    print(num, "is a prime number")
else:
    print(num, "is not a prime number")

Q80. Write a Python program to check Armstrong Number.

# take input from the user
num = int(input("Enter a number: "))

# initialize sum
sum = 0

# find the number of digits
order = len(str(num))

# check if the number is an Armstrong number
temp = num
while temp > 0:
   digit = temp % 10
   sum += digit ** order
   temp //= 10

if num == sum:
   print(num,"is an Armstrong number")
else:
   print(num,"is not an Armstrong number")

Q81. Write a Python program to find the n-th Fibonacci Number.
# take input from the user
n = int(input("Enter the value of n: "))

# initialize the first two numbers in the sequence
a = 0 
b = 1

# check if n is valid
if n <= 0:
    print("Please enter a positive integer.")
elif n == 1:
    print("The", n, "st Fibonacci number is", a)
else:
    # loop to find the n-th Fibonacci number
    for i in range(2, n+1):
        c = a + b
        a, b = b, c

    print("The", n, "th Fibonacci number is", c)


Q82. Write a Python program to interchange the first and last element in a list.

print(list1+list2)
a=[list1[-1]]+list1[1:len(list1)-1]
print(a)

or

lst = input("Enter a list of numbers: ").split()

lst[0], lst[-1] = lst[-1], lst[0]

print("Updated list:", lst)


Q83. Write a Python program to swap two elements in a list.

# take input from the user
lst = input("Enter a list of numbers: ").split()

# convert each item to an integer
lst = [int(x) for x in lst]

# take input for the indices of elements to swap
i, j = map(int, input("Enter the indices of the elements to swap: ").split())

# check if the indices are valid
if i < 0 or i >= len(lst) or j < 0 or j >= len(lst):
    print("Invalid indices.")
else:
    # swap the elements
    lst[i], lst[j] = lst[j], lst[i]

    # print the updated list
    print("Updated list:", lst)
Q84. Write a Python program to find N largest element from a list.


a=input('enter elements ').split()
a=[int(i) for i in a]
largest=a[0]
for i in range(0,len(a)):
    if a[i]>largest:
        largest=a[i]
    else:
        continue

print(a)
print(largest)
    
Q85. Write a Python program to find cumulative sum of a list.

a=input('enter elements ').split()
a=[int(i) for i in a]

s=0
for i in a:
    s=s+i
    
print(s)

Q86. Write a Python program to check if a string is palindrome or not.

a=input('enter the number ')
if a[: : -1]==a:
    print('palindrome')
else:
    print('not a palindrome')

Q87. Write a Python program to remove i'th element from a string.

a=input('enter a string')
b=int(input('enter the ith element to be removed '))
if int(b)<0 or int(b)>=len(a):
    print('invalid number')
    
else:
    c=[]
    for i in a:
        c.append(i)
        
    print(c)
    c.remove(c[b])
    z=''
    z=z.join(c)
    
    
print(z)

Q88. Write a Python program to check if a substring is present in a given string.
a=input('enter a string')
b=input('enter the substring  ')

if b in a:
    print('present')
    
else:
    print('not prsent')
    
Q89. Write a Python program to find words which are greater than given length k.
a=input('enter a string').split()
k=int(input('enter k  '))

for i in a:
    if len(i)>k:
        print(i)
    else:
        continue

Q90. Write a Python program to extract unique dictionary values.

my_dict = {"a": 1, "b": 2, "c": 3, "d": 2, "e": 1}
unique_values = list(set(my_dict.values()))
print(unique_values)


Q91. Write a Python program to merge two dictionary.
dict1 = {"a": 1, "b": 2, "c": 3}
dict2 = {"d": 4, "e": 5, "f": 6}

merged_dict = {**dict1, **dict2}

print(merged_dict)

Q92. Write a Python program to convert a list of tuples into dictionary.

Input : [('Sachin', 10), ('MSD', 7), ('Kohli', 18), ('Rohit', 45)]
Output : {'Sachin': 10, 'MSD': 7, 'Kohli': 18, 'Rohit': 45}
Input1 = [('Sachin', 10), ('MSD', 7), ('Kohli', 18), ('Rohit', 45)]
dic={}
for k,v in Input1:
    dic[k]=v
    
print(dic)

Q93. Write a Python program to create a list of tuples from given list having number and its cube in each tuple.

Input: list = [9, 5, 6]
Output: [(9, 729), (5, 125), (6, 216)]

i= [9, 5, 6]
cube=list(map(lambda x:(x,x**3),i))
print(cube)

Q94. Write a Python program to get all combinations of 2 tuples.

Input : test_tuple1 = (7, 2), test_tuple2 = (7, 8)
Output : [(7, 7), (7, 8), (2, 7), (2, 8), (7, 7), (7, 2), (8, 7), (8, 2)]

test_tuple1 = (7, 2)
test_tuple2 = (7, 8)

# printing original tuples
print("The original tuple 1 : " + str(test_tuple1))
print("The original tuple 2 : " + str(test_tuple2))

# All pair combinations of 2 tuples
# Using list comprehension
res = [(a, b) for a in test_tuple1 for b in test_tuple2]
res = res + [(a, b) for a in test_tuple2 for b in test_tuple1]

# printing result
print("The filtered tuple : " + str(res))

Q95. Write a Python program to sort a list of tuples by second item.

Input : [('for', 24), ('Geeks', 8), ('Geeks', 30)] 
Output : [('Geeks', 8), ('for', 24), ('Geeks', 30)]


def Sort_Tuple(tup):
 
    # getting length of list of tuples
    lst = len(tup)
    for i in range(0, lst):
 
        for j in range(0, lst-i-1):
            if (tup[j][1] > tup[j + 1][1]):
                temp = tup[j]
                tup[j] = tup[j + 1]
                tup[j + 1] = temp
    return tup
 
tup =[('for', 24), ('Geeks', 8), ('Geeks', 30)] 
 
print(Sort_Tuple(tup))

Q96. Write a python program to print below pattern.

* 
* * 
* * * 
* * * * 
* * * * * 

n = 5

for i in range(n):
    for j in range(i+1):
        print("*", end=" ")
    print()



Q97. Write a python program to print below pattern.

    *
   **
  ***
 ****
*****
n = 5

for i in range(n):
    for j in range(n):



Q98. Write a python program to print below pattern.

    * 
   * * 
  * * * 
 * * * * 
* * * * * 
n = 5

for i in range(n):
    for j in range(n-i-1):
        print(" ", end="")
    for j in range(i+1):
        print("* ", end="")
    print()

        if j >= n-i-1:
            print("*", end="")
        else:
            print(" ", end="")
    print()


Q99. Write a python program to print below pattern.

1 
1 2 
1 2 3 
1 2 3 4 
1 2 3 4 5

n = 5

for i in range(n):
    for j in range(i+1):
        print(j+1, end=" ")
    print()

Q100. Write a python program to print below pattern.

A 
B B 
C C C 
D D D D 
E E E E E 

n = 5
start = ord('A')

for i in range(n):
    for j in range(i+1):
        print(chr(start+i), end=" ")
    print()









